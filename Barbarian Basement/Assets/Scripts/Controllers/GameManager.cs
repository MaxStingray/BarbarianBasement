using System.Collections;
using UnityEngine;

public class GameManager : MonoBehaviour
{
    public static GameManager Instance;
    [SerializeField] private DunGen _dungeonGenerator;
    [SerializeField] private Player _player;

    public Player Player => _player;

    [SerializeField] private GameObject _stairsPrefab;

    private GameObject _spawnedStairs;

    [SerializeField] private EnemyManager _enemyManager;
    [SerializeField] private InteractableManager _interactableManager;

    [SerializeField] private StatsPanel _statsPanel;
    public StatsPanel StatsPanel => _statsPanel;

    //the grid generated by DunGen, passed here before GameReady is true
    public GameTile[,] FinalGrid { get; private set; }

    public bool GameReady { get; private set; }

    public int FloorCounter { get; private set; } = 1;

    void Awake()
    {
        if (Instance != null)
        {
            Destroy(Instance);
        }

        Instance = this;
    }

    public void StartNewGame()
    {
        ResetAndStartNewDungeon(true);
    }

    [ContextMenu("Debug Reset")]
    public void MoveToNextFloor()
    {
        FloorCounter++;
        ResetAndStartNewDungeon(false);
    }

    public void ResetAndStartNewDungeon(bool newGame)
    {
        StartCoroutine(ResetDungeonSequence(newGame));
    }

    private IEnumerator ResetDungeonSequence(bool newGame)
    {
        GameReady = false;

        //clean up the stairs from the previous floor (if any)
        if (_spawnedStairs != null)
        {
            Destroy(_spawnedStairs);
            _spawnedStairs = null;
        }
        
        // Clear existing enemies
        _enemyManager.ClearEnemies();

        // Clear dungeon
        _dungeonGenerator.ClearDungeon();

        yield return null;

        // Regenerate dungeon
        _dungeonGenerator.GenerateDungeon();

        while (!ValidateGameReady())
        {
            yield return null;
        }

        FinalGrid = _dungeonGenerator.Grid;

        if (newGame)
        {
            //reset the player stats to their base
            _player.ResetCharacter();
        }

        //Move player
        _player.transform.position = _dungeonGenerator.PlayerSpawnPosition;
        _player.CurrentTile = _dungeonGenerator.PlayerStartTile;
        _dungeonGenerator.PlayerStartTile.IsOccupied = true;
        _dungeonGenerator.PlayerStartTile.OccupiedByCharacter = _player;

        //Add stairs
        //TODO: make stairs rotation make sense
        _spawnedStairs = Instantiate(_stairsPrefab, _dungeonGenerator.StairsPosition, Quaternion.identity);
        Interactable stairs = _spawnedStairs.GetComponent<Interactable>();
        if (!stairs)
        {
            Debug.LogError("stairs prefab is not valid and will not be interactable");
        }
        else
        {
            _dungeonGenerator.StairsTile.IsOccupied = true;
            _dungeonGenerator.StairsTile.OccupiedByInteractable = stairs;
        }

        //Update stats
        _statsPanel.UpdateStatsPanel(_player);

        //Spawn new enemies
        _enemyManager.SpawnEnemies(FinalGrid);

        _dungeonGenerator.MarkInteractables();

        _interactableManager.SpawnInteractables(_dungeonGenerator.InteractableTiles);
    }

    private bool ValidateGameReady()
    {
        if (_dungeonGenerator.DungeonGenerated)
        {
            return GameReady = true;
        }

        return false;
    }
}
