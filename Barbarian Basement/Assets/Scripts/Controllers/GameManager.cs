using System.Collections;
using UnityEngine;

public class GameManager : MonoBehaviour
{
    public static GameManager Instance;
    [SerializeField] private DunGen _dungeonGenerator;
    [SerializeField] private Player _player;

    public Player Player => _player;

    [SerializeField] private EnemyManager _enemyManager;

    [SerializeField] private StatsPanel _statsPanel;
    public StatsPanel StatsPanel => _statsPanel;

    //the grid generated by DunGen, passed here before GameReady is true
    public GameTile[,] FinalGrid { get; private set; }

    public bool GameReady { get; private set; }

    void Awake()
    {
        if (Instance != null)
        {
            Destroy(Instance);
        }

        Instance = this;
    }

    // use this for now
    void Start()
    {
        StartNewGame();
    }

    public void StartNewGame()
    {
        ResetAndStartNewDungeon(true);
    }

    [ContextMenu("Debug Reset")]
    public void StartNewFloor()
    {
        ResetAndStartNewDungeon(false);
    }

    public void ResetAndStartNewDungeon(bool newGame)
    {
        StartCoroutine(ResetDungeonSequence(newGame));
    }

    private IEnumerator ResetDungeonSequence(bool newGame)
    {
        GameReady = false;

        // Clear existing enemies
        _enemyManager.ClearEnemies();

        // Clear dungeon
        _dungeonGenerator.ClearDungeon();

        yield return null;

        // Regenerate dungeon
        _dungeonGenerator.GenerateDungeon();

        while (!ValidateGameReady())
        {
            yield return null;
        }

        FinalGrid = _dungeonGenerator.Grid;

        if (newGame)
        {
            //reset the player stats to their base
            _player.ResetCharacter();
        }

        // Move player
        _player.transform.position = _dungeonGenerator.PlayerSpawnPosition;
        _player.CurrentTile = _dungeonGenerator.PlayerStartTile;
        _dungeonGenerator.PlayerStartTile.IsOccupied = true;
        _dungeonGenerator.PlayerStartTile.OccupiedByCharacter = _player;

        // Update stats
        _statsPanel.UpdateStatsPanel(_player);

        // Spawn new enemies
        _enemyManager.SpawnEnemies(FinalGrid);
    }

    private bool ValidateGameReady()
    {
        if (_dungeonGenerator.DungeonGenerated)
        {
            return GameReady = true;
        }

        return false;
    }
}
